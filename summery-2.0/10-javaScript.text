JavaScript short note
1. Introduction
2. JavaScript Variable
3. Strict Mode
4. JavaScript Scope
5. Global Variables
6. JavaScript Operators
7. Templates literals
8. JavaScript Output
9. JavaScript Data Types
10. JavaScript Function
11. ES6 Arrow Function
12. String propertys and methods
13. Regular Expressions (RegEx)
14. JavaScript Object
15. JavaScript Array
16. JavaScript Loop
17. JavaScript this
18. JavaScript Class
19. JavaScript JSON
20. setInterval() and setTimeout()
21. Synchronous and Asynchronous JavaScript
22. fetch() API
23. Axios API
24. DOM
25. JavaScript Events
26. JavaScript Errors
27. Web API
28. JavaScript Conversion
29. JavaScript Sets
30. JavaScript Maps
31. Summery
32. FAQ



==================
1. Introduction
==================
. JavaScript Official name ECMA Script. (European Computer Manufacturers Association)
. ECMAScript defines the core features and syntax for scripting languages. 
. JavaScript case sensitive.
. Javascript is the synchronous.
. Button as a link
  <button onclick="document.location='default.asp'">HTML Tutorial</button>

==================
2. JavaScript Variable
==================
I.   var
II.  let  [Real life coding we only use let]
III. const

------------
# Assign a Variable
------------
var x; 		[variable Declearing]
x = 5; 		[variable assin]
var x = 5; 	[variable Initialize]
let x = 5; 	[variable Initialize]

------------
I. var
------------
Example:
var x = 5;
var x = 10;
console.log(x);
//output: 10

------------
II. let
------------
i. Variable define with 'let' can not redefine but we can assign it.

Example:
let x = 5;   
let x = 10;  	// XXX Again redeclear not applicable
console.log(x);
[Syntex Error: x has already decleared]

let x = 5;
var x = 10;
console.log(x);
[Syntex Error: x has already decleared]

Correct Way:
Example:
let x = 5;
    x = 10;
console.log(x);

----
Variable Hoting:
----
Hosting is a default behavior of JavaScript which move variable declerations to the top.

==================
3. Strict Mode
==================

. "use strict";
. When we use Strice mode then we need to code with correct format. 
. Variable Hoting not working on Strict Mode


==================
4. JavaScript Scope
==================
. After declear any variable, the accessablity of this varibale 
  define by the JavaScript Scope.

. JavaScript has 3 types of scope:
  I.  Block scope
  II. Function scope
  III. Global scope
      - Automatically Global

--------
Block Scope
--------
. Variables declared inside a curly braces {}, called Block Scope.

. Block Scope cannot be accessed outside the block, 
  
. let and const are Block Scope.

Example:
  {
    let x = 2;
  }
   // x can NOT be used here


Note:
. var not a block scope.

. Varibale declear with var inside a { } block 
  can be accessed from outside the block.
. Example:
  {
    var x = 2;
  }
  // x CAN be used here

--------
Function Scope
--------
. Variables defined inside a function called Function Scope. They are
  not accessible outside the defined function.

. Example:
  ------------
  function myFunction() {
     var carName = "Volvo";   // Function Scope
  }
  ------------
  function myFunction() {
    let carName = "Volvo";   // Function Scope
  }
  ------------
  function myFunction() {
   const carName = "Volvo";   // Function Scope
  }
  ------------

Note:
. ** Var function scope.
. ** let and const is block scope and function scope.

--------------------
Global Scope
--------------------
. Global scope is the outermost level means do not have any enclosing function or block.
. These variables can be accessed from anywhere in a JavaScript program.


==================
5. Global Variables
==================
. A variable which declared in the Global Scope  can be accessible from anywhere in our JavaScript code.

. If we declare a variable using var in the global scope, it will become a property of the window object.

Example
--------------------
var aName1 = "TATA";
let acarName2 = "VOLVO";
console.dir(window);
--------------------     

. 'let' declared variables are not added to the window object. 
   They are block-scoped 


==================
6. JavaScript Operators
==================
I. Arithmetic Operators:

+: Addition or string concatenation.

-: Subtraction.

*: Multiplication.

/: Division.

%: Modulo (remainder).

++: Increment.

--: Decrement.

--------------------
String Concatenation using + Operator
--------------------
let firstName = "John";
let lastName = "Doe";
let fullName = firstName + " " + lastName; 
console.log(fullName); 

--------------------
II. Comparison Operators
--------------------
==: compares both value.

===: compares both value and type.

!=: Not equal to.

!==: Strict not equal to (compares both value and type).

>: Greater than.

<: Less than.

>=: Greater than or equal to.

<=: Less than or equal to.

--------------------
III. Logical Operators: Used to combine or invert conditions.
--------------------

&&: Logical AND.

||: Logical OR.

!: Logical NOT.

--------------------
IV. Ternary Operator: 
    A shorthand for an if-else statement.
--------------------
Syntax: 
condition ? expression_if_true : expression_if_false.

Example:
--------------------
let age = 18;
let status = age >= 18 ? "Adult" : "Minor";
console.log(status);  // "Adult"


==================
7. Templates literals
==================
let name = 'Santanu Chowdhury';
let work = 'Web Desinger and WordPress Developer';
let x = `My name is ${name}.
I am a ${work}`;
console.log(x);

==================
8. JavaScript Output
==================
i.   console.log();
ii.  console.dir();
iii. innerHTML
iv.  alert();
v.   window.print();
vi.  document.write();

Why console.log() vs console.dir()
console.log() : Use for simple values (strings, numbers, basic objects).
console.dir() : Use to check objectâ€™s properties, tree-like structure


==================
9. JavaScript Data Types
==================
JavaScript has 8 Datatypes
  . Numbers
  . Strings
  . Booleans
  . Object
  . Array
  . Date
  . Undefined
  . Null

---------
i. Undefined
---------
When We declare a variable without assigning it a value, 
JavaScript automatically assigns undefined to that variable

Example:
let car;
console.log(car);		// Undefined
console.log(typeof car);	// Undefined

//** Here assign value is Undefined and type of this value also Undefined.
// In JavaScript, 'undefined' is both a value and a type.


Note:
** A Variable can become emptied by assing 'undefined'
Example:
let x = [1,2,3,4];
    x = undefined;
    console.log(x)    
    // undefined
    
---------
ii. Empty 
---------
It is An empty string or a string with zero characters.
let car = "";
console.log(typeof car);
output: string

---------
iii. Primitive Data Value
---------
. It is simple Data type which do not contain properties and methods.
. Example:
  string
  number
  boolean
  
---------
iv. Null
---------
. In JavaScript null is "nothing" or doesn't exist.
. null is an object.  
. * We can empty an object by assing null.
. * Aso We can empty an object by assing undefined.

---------
v. NaN (Not-a-Number)
---------
. It represents a value that is not a valid number.

------------
*** Difference Between Undefined and Null
------------
. Undefined and null are equal in value but different in data type:
  
Equal in value:
null == undefined          // true

Different in type:
null === undefined         // false

because:
typeof undefined           // undefined
typeof null                // object


==================
10. JavaScript Function
==================
--------------
i. Default Parameter
--------------
function name(firstName='Santanu',lastName){
  console.log('My name is'+ ' ' + firstName + ' ' + lastName);
}
name('Santanu', 'Chowdhury');
//output: My name is Santanu Chowdhury.

--------------
ii. (...params)
--------------
function name(firstName,...params){
  console.log(firstName);
  console.log(params);
  console.log(arguments.length);
}
name('Santanu', 1,2,3,4,5);
//output: 
Santanu
[1, 2, 3, 4, 5]
6
---------
iii. Function Arguments:
---------
. Using Funcion Arguments we can access function parameter within
  the Function.

Example:
function name(firstName,lastName){
    console.log(arguments);
    console.log(arguments[0]);
    console.log(arguments.length);
    console.log('My name is'+ ' ' + firstName + ' ' + lastName);
  }
name('Santanu', 'Chowdhury');  


------------
iv. Function Return
------------
. When JavaScript function reaches a  'return' statement, then the 
  function stops executing. 
  
. If we use 'return' then we can store the return value under a variable.

Example1:
function name(firstName,lastName){
  return firstName + ' ' + lastName;
  console.log('This will not print');
}
let x = name('Santanu', 'Chowdhury');
console.log(x);
//output: Santanu Chowdhury

------------
Note: 
Under any function if we do not use 'return', then the function itself return
a 'undefined' value.
------------
function name(firstName,lastName){
console.log(firstName + ' ' + lastName);
}
let x = name('Santanu', 'Chowdhury');
console.log(x);

//output: Santanu Chowdhury
  	  undefined
  
---------
v. Anonymous Function:
---------
Function without a name called anonymous function.

Example:
---------
let car = function() {
    console.log("This is an anonymous function");
};
car();

---------
vi. Self-Invoking Functions / IIFE
---------
(function() {
  console.log('Hello World');
})();

Note:
. It is also a Anonymous function 

==================
11. ES6 Arrow Function
==================
()=>{
  }
-------
i. Basic Arrow function:
-------
let name = () =>{
  console.log('My name is Santanu Chowdhury');
}
name();

-------
ii. Arrow Function with Parameter
-------
Example1:
let name = (x) =>{
  console.log(`My name is ${x}`);
}

-------
iii. Arrow Function with Single Statement
-------
let name = (firstName,lastName) => console.log(`My name is  ${firstName} ${lastName}`);

-------
*** iv. Arrow Function with Single Parameter and single statement
-------
let name = x => console.log(`My name is  ${x}`);


==================
12. String propertys and methods
==================
String propertys:
--------------
i. length
--------------
let str = "Hello, World!";
console.log(str.length);  // Output: 13
--------------

ii. toUpperCase()
--------------
let str = "hello";
let upperStr = str.toUpperCase();
console.log(upperStr);  // Output: "HELLO"
--------------

iii. Escape Character (\)
    The backslash (\) is used to allow Special Characters in strings.
--------------
let str = "This is a \"quoted\" string";
console.log(str);  // Output: This is a "quoted" string
--------------

iv. trim()
--------------
let str = "   Hello, World!   ";
let trimmedStr = str.trim();
console.log(trimmedStr);  // Output: "Hello, World!"
--------------

v. slice()
--------------
let str = "Hello, World!";
let sliced = str.slice(0, 5);  // Extracts "Hello"
console.log(sliced);  // Output: "Hello"
--------------

vi. split()
    . Splits a string into an array based on a separator Like - , + etc
    . Works only on strings.
--------------
let str = "apple,banana,cherry";
let arr = str.split(",");
console.log(arr);  // Output: ["apple", "banana", "cherry"]
--------------

vii. Array.from()
    . Converts any iterable or array-like object into an array.
    . Works on strings, Sets, Maps, arguments object, etc.
--------------
let str = "Hello";
let arr = Array.from(str);
console.log(arr);  // Output: ['H', 'e', 'l', 'l', 'o']

// From a Set
let mySet = new Set([1, 2, 3]);
let arrSet = Array.from(mySet);
console.log(arrSet);
// Output: [1, 2, 3]

--------------

viii. includes()
--------------
let str = "Hello, World!";
let result = str.includes("World");
console.log(result);  // Output: true
--------------

==================
13. Regular Expressions (RegEx)
==================
Regular expressions are used for searching and replacing patterns in strings. 

Modifiers in Regular Expressions:
i: Case-insensitive matching.
g: Global match (find all occurrences).
m: Multiline matching.

Example:
--------------
let x = "I love HTML.  html is scripting language";
x = x.replace(/html/igm, "JavaScript");
console.log(x);  // Output: "I love JavaScript.  JavaScript is scripting language"
--------------

# Additional Regular Expression Methods:
test(): Checks the pattern exists or not.
--------------
let str = 'I love HTML.';
console.log(/html/i.test(str));  // Output: true
--------------

==================
14. JavaScript Object
==================

. In JavaScript every thing is Object.
. Object create with 'const' variable
. ***functon within a object called 'Method'

--------------
I. Basic Object
--------------
const me = {
  firstName:   'Santanu',
  lastName:    'Chowdhury',
  citizenShip: 'Indian',
  designation: 'Web Designer',
  skills : {
    webDesing:"HTML, CSS, JavaScript"
  },
  office:function(){
   return 'I am working in Webmaddy.com';
  },
};
console.log(me.firstName);
console.log(me['firstName']);     //Another way
console.log(me.skills.webDesing);
console.log(me.office());

Note:
'firstName' called key
'Santanu'   called value


--------------
II. Object Destructuring
    It is the  way to extract values from objects and assign them to variables
--------------
const {firstName} = me;
const {firstName:title} = me;
const {skills:{webDesing}} = me;
const {skills:{webDesing:all}} = me;

console.log(firstName);
console.log(title);
console.log(webDesing);
console.log(all);

--------------
III. Add Two Object | copy Object
--------------
const all = {
  ...me,
  ...work
}
console.log(all);

---------
IV. use Built-In Methods on Object Method
---------
const me = {
    firstName :   'Santanu',
    office : function() {
       return ('I am working in Webmaddy.com').toUpperCase();
      }
    };
console.log(me.office());   

---------

--------------
V. Object Properties:
--------------
const me = {
   name : 'Santanu Chowdhury',
   age  : 32,
   eye  : 'Black'
}
   console.log(me);
   me.skill = 'HTML5'; // Add key and value
   me.age = 33 ;       // Edit value
   delete me.eye;      // Delete eye
   
---------
VI. Adding a Method to an Object
---------
const me = {
   firstName:   'Santanu',
   lastName:    'Chowdhury',
};
    
me.office = function(){
   return 'I am working in Webmaddy.com';
}
console.log(me.office());

---------
VII. Object Methods
---------
I. Object.assign(target, source)		
   > use to Copy source object to target object

II. Object.entries()
   > use to convert Object to Map datatype 

III. Object.fromEntries()
   > Use to convert Map to Object datatype

IV. Object.freeze()
    use to Freezing an object

V. Object.isFrozen()
   Check any Object frozen or not

VII. Object.hasOwn()
     Check any property exist or not
   
     hasOwnProperty()

VIII. Object.keys()
   Get object Keys as a Array

IX. Object.values()
  Get object Values as a Array

X. call()

XI. apply()

XII. bind()

Example:
--------------
I. Object.assign()
--------------
<script>
const target = { a: 1, b: 2 };
const source = { b: 4, c: 5 };

const returnedTarget = Object.assign(target, source);

console.log(target);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget);
// Expected output: Object { a: 1, b: 4, c: 5 }

console.log(returnedTarget === target);
// Expected output: true
</script>

--------------
II. Object.entries()
    Object to Map
--------------
<script>
const person = { name: "Satanu", age: 34 };
const entries = Object.entries(person);
console.log(entries); // [["name", "Santanu"], ["age", 34]]
</script>

--------------
III. Object.fromEntries()
   > Map to Object
--------------
<script>
const mapDataType = new Map([
  ["apples", 500],
  ["bananas", 300],
  ["oranges", 200]
]);

//Map to Object Datatype
let objectDataType = Object.fromEntries(mapDataType);
console.log(objectDataType);

//Expected output:
//{apples: 500, bananas: 300, oranges: 200}
</script>

--------------
IV. Object.freeze()
    use to Freezing an object
--------------
const me = {
  name: "Santnau",
  age: 31,
};
console.log(me.age)

me.age = 32;
console.log(me.age)
// Expected output: 32

//freezeing the object
Object.freeze(me);

me.age = 33;  // Cannot change when freeze
console.log(me.age)
// Expected output: 32

delete me.age  // Cannot delete when freeze
console.log(me.age);
//Expected output: 32

--------------
V. Object.isFrozen()
   Check any Object frozen or not
--------------
const me = {
  name: "Santnau",
  age: 31,
};
//freezeing the object
Object.freeze(me);

//Check Frozen or not
console.log(Object.isFrozen(me));
// Expected output: true

--------------
VII. Object.hasOwn()
     Check any property exist or not
--------------
const me = {
  name: "Santnau",
  age: 31,
};

console.log(Object.hasOwn(me, 'name'));
// Expected output: true

console.log(Object.hasOwn(me, 'skills'));
// Expected output: false

--------------
 hasOwnProperty()
--------------
const me = {
  name: "Santnau",
  age: 31,
};
console.log(me.hasOwnProperty('name')); //true
console.log(me.hasOwnProperty('id'));   //false

--------------
VIII. Object.keys()
     Get object Keys as a Array
--------------
const me = {
  name: "Santnau",
  age: 31,
};
let arrayDataType = Object.keys(me);
console.log(arrayDataType);
// Expected output: Â ['name', 'age']

--------------
IX. Object.values()
   Get object Values as a Array
--------------
const me = {
  name: "Santnau",
  age: 31,
};
let arrayDataType = Object.values(me);
console.log(arrayDataType);
// Expected output: Â ['Santnau', 31]

--------------
X. delete
--------------
const me = {
  name: "Santnau",
  age: 31,
};
delete me.age;
console.log(me);

---------
call()
---------
> Using the call() method, an object can borrow a method from another object.
> Here we can add more arguments/parameters separately
---------
Example 1:
---------
    const globalMethod = {
      fullName: function() {
        return this.firstName + " " + this.lastName;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.call(person1);
   console.log(x);

---------
** Passing Extra values
Example 2:
---------
    const globalMethod = {
      fullName: function(skill="", citizen="") {
        return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.call(person1, "HTML5", "CSS3");
   console.log(x);


---------
apply()
---------
> With the apply() method, an object can borrow a method from another object.
> Here we can add more arguments/parameters as an Array.
> We can find max value for an Array
  Math.max.apply(null, [Array]);
  
---------
Example 1: Find the lagest value form an Array
--------- 
console.log(Math.max.apply(null,[1,2,3]));

---------
bind()
---------
> With the bind() method, an object can borrow a method from another object.
> Here it is to create a new function. 

---------
Example 1:
--------- 
const globalMethod = {
      fullName: function(skill="", citizen="") {
        return this.firstName + " " + this.lastName + " " +skill + " " +citizen;
      }
    }
    const person1 = {
      firstName:"Santanu",
      lastName: "Chowdhury",
    }
    const person2 = {
      firstName:"Mayank",
      lastName: "Chowdhury",
    }
   const x = globalMethod.fullName.bind(person1);
   console.log( x('HTML5', 'CSS3'));

--------- 

Note:
I.  Immutable:
    Primitive values are immutable
    
II. Mutable:
    JavaScript Objects are mutable.


==================
15. JavaScript Array
==================
const me = ['Santanu', 'Chowdhury', 'Indian'];

-------
I. Access Array
-------
let x = me[0];
console.log(x);

-------
II. Change Array Element
-------
me[2] = "Pro Indian";
console.log(me[2]);

-------
III. Access Full Array
-------
document.getElementById('demo').innerHTML=me;

-------
IV. Array Destructuring
-------
const me = ['Santanu', 'Chowdhury', 'Indian'];
let [firstName, lastNmae] = me;
console.log(firstName);
console.log(lastNmae);

-------
V. Check Array or Object
-------
console.log(Array.isArray(me));
//Output:true

-------
VI. Difference of Array and Object
-------
. Array use number index so it can be Iterate one by one
. Object use named index so it can not Iterate.

> We will use Array, when we want number index and Iterate one by one.
> We will use Object, when we want name index.



--------------
VII. Array Methods and Propertys:
--------------
const me = ['Santanu', 'Chowdhury', 'Indian'];
let me = [1, 2, 3, 4];

	
i.    me.length				// Get the number of elements in an array.
ii.   me[me.length-1];   		// Get last element
iii.  me.push('Coding'); 		// Add element from last
iv.   me.unshift('Mr');  		// Add element from fast
v.    me.pop();          		// Removes the last element from the array
vi.   me.shift();        		// Removes the first element from the array
vii.  delete me[1];             	// Delete element from the array
viii. me.slice(0, 2)            	// Returns a shallow copy
ix.   me.splice();			// Modifies the array
x.    array1.concat(array2,array3); 	// Merges multiple arrays into a single array.
xi.   const all  = [...me, ...more];    // The spread operator (...) is used to expand elements of an array or object.
xii.  const copyMe = [...me];           // Copy of the array.
xiii. sort()				// Sorts them alphabetically
xiv.  Array.from()			// Creates a new array from string, Set, Map		
xiv.  me.toString();     		// Boolean to binary and binary and boolean
xv.   me.join("+"); 


--------------
i. me.length
--------------
let me = [1, 2, 3, 4];
console.log(me.length);  // Output: 4


--------------
ii. me[me.length - 1]
--------------
let me = [1, 2, 3, 4];
console.log(me[me.length - 1]);  // Output: 4


--------------
iii. me.push('Coding')
--------------
let me = ['JavaScript', 'React'];
me.push('Coding');
console.log(me);  // Output: ['JavaScript', 'React', 'Coding']


--------------
iv. me.unshift('Mr')
--------------
let me = ['JavaScript', 'React'];
me.unshift('Mr');
console.log(me);  // Output: ['Mr', 'JavaScript', 'React']


--------------
v. me.pop()
--------------
let me = ['JavaScript', 'React', 'Coding'];
let removedElement = me.pop();
console.log(removedElement);  // Output: 'Coding'
console.log(me);  // Output: ['JavaScript', 'React']


--------------
vi. me.shift()
--------------
let me = ['Mr', 'JavaScript', 'React'];
let removedElement = me.shift();
console.log(removedElement);  // Output: 'Mr'
console.log(me);  // Output: ['JavaScript', 'React']


--------------
vii. delete me[1]
--------------
let me = ['Mr', 'JavaScript', 'React'];
delete me[1];
console.log(me);  // Output: ['Mr', <1 empty item>, 'React']


--------------
viii. me.slice(0, 2)
--------------
let me = ['JavaScript', 'React', 'Node'];
let slicedArray = me.slice(0, 2);
console.log(slicedArray);  // Output: ['JavaScript', 'React']


--------------
ix. me.splice();
--------------
let me = ['JavaScript', 'React'];
me.splice(1, 0, 'Code', 'Car');
console.log(me);  // Output: ['JavaScript', 'Code', 'Car', 'React']


--------------
x. array1.concat(array2, array3)
--------------
let array1 = ['JavaScript', 'React'];
let array2 = ['Node', 'Express'];
let mergedArray = array1.concat(array2);
console.log(mergedArray);  // Output: ['JavaScript', 'React', 'Node', 'Express']


--------------
xi. const all = [...me, ...more]
--------------
let me = ['JavaScript', 'React'];
let more = ['Node', 'Express'];
let all = [...me, ...more];
console.log(all);  // Output: ['JavaScript', 'React', 'Node', 'Express']


--------------
xii. const copyMe = [...me]
--------------
let me = ['JavaScript', 'React'];
let copyMe = [...me];
copyMe.push('Node');
console.log(me);       // Output: ['JavaScript', 'React']
console.log(copyMe);   // Output: ['JavaScript', 'React', 'Node']


--------------
xiii. sort()
--------------
let me = ['Banana', 'Apple', 'Orange'];
me.sort();
console.log(me);  // Output: ['Apple', 'Banana', 'Orange']


--------------
xvi. Array.from()
--------------
let x = "Lorem";
x = Array.from(x);
console.log(x);  // Output: ['L', 'o', 'r', 'e', 'm']


==================
16. JavaScript Loop
==================
I.   for...in
II.  for...of
III. forEach()
IV.  map()
V.   find()
VI.  filter()
VII. reduce((acc, num))

--------------
I. for...in
   Iterates over object keys (not values).
   In case of arrays, it iterates over indexs.
--------------
Example:1
--------------
const me = {
  firstName:   'Santanu',
  lastName:    'Chowdhury',
  citizenShip: 'Indian',
  designation: 'Web Designer',
  skills : {
    webDesing:"HTML, CSS, JavaScript"
  },
  office:function(){
   return 'I am working in Webmaddy.com';
  },
};

for (let key in me) {
   console.log(key);
   console.log(me[key]);
}
//output: firstName, lastName, citizenShip, designation, skills, office
//output: Santanu, Chowdhury, Indian, Web Designer, { webDesing: 'HTML, CSS, JavaScript' }, 
          function() { return 'I am working in Webmaddy.com'; }

--------------
Example:2
--------------
let arr = ['Apple', 'Banana', 'Orange'];

for (let index in arr) {
  console.log(index);       // Output: 0, 1, 2 (array indices)
  console.log(arr[index]);  // Output: Apple, Banana, Orange (array values)
}

Note: For arrays, a better alternative is the for...of loop, 
which directly iterates over values.

--------------
II. for...of
    Iterates values of iterable objects (arrays, strings, maps, etc.)
--------------
Example:1
--------------
let arr = ['Apple', 'Banana', 'Orange'];

for (let value of arr) {
  console.log(value);       //output: Apple, Banana, Orange
}

--------------
Example:2
--------------
const me = {
  firstName:   'Santanu',
  lastName:    'Chowdhury',
  citizenShip: 'Indian',
  designation: 'Web Designer',
};

for (let key of me) {
   console.log(key);
}
//output: TypeError: me is not iterable

**Note: Here we can use Object.value() to get values.

--------------
III. forEach()
--------------
. It don not return a new array
. It is mainly use logging, updating other states.

--------------
const me = ['Santanu', 'Chowdhury', 'Indian'];
me.forEach((value, key)=>{
    console.log(value, key);
});
//output: Santanu 0, Chowdhury 1, Indian 2

--------------
IV. map()
--------------
. It return a new array.
. When we want to transform each element.
--------------
Example:1
--------------

const me = ['Santanu', 'Chowdhury', 'Indian'];
me.map((value, key)=>{
    console.log(value, key);
});
//output: Santanu 0, Chowdhury 1, Indian 2


//Use for this only
const arr = [1, 2, 3];
let result = arr.map((value, key) => {
  return value * 2;
});
console.log(result);
//output: [2, 4, 6]


--------------
Example:2
--------------
const info = [
    { category: "Fruits", price: "$1", stocked: true, name: "Apple" },
    { category: "Fruits", price: "$1", stocked: true, name: "Dragonfruit" },
    { category: "Fruits", price: "$2", stocked: false, name: "Passionfruit" },
  ];
  info.map((value, key) => (
    console.log(value),
    console.log(value.category),
    console.log(`Price is` + ' ' + value.name)
  ));

--------------
Note:
info.map(()=>());             // Without curly braces {} for Single Expression 
info.map(() =>{return()})     // With curly braces {} use return() to return a value.

--------------
V. find() 
   Only returns the first match element
   Returns undefined if no match is found:
--------------
Example:1
--------------

  const arr = [10,20,30,40,50];
  
  const result = arr.find((value, key)=>{
    return value > 30;
  })
  
  const result2 = arr.find(value => value > 30);
  
  console.log(result); // 40
  console.log(result2); // 40
  
--------------
Example:2
--------------
 const posts = [
    { name: "apples", quantity: 2 },
    { name: "bananas", quantity: 0 },
    { name: "cherries", quantity: 5 },
 ];
 let result = posts.find((value)=>{
    return value.name === "apples"
 })
 
 //let result = posts.find(value => value.name === "apples")
 
 console.log(result);       // object { name: "apples", quantity: 2 }  
 console.log(result.name);  // "apples"


--------------
VI. filter()
    returns all element that passes a test 
    and creates a new array with them.
--------------
const arr = [10,20,30,40,50];
const result = arr.filter((value, key)=>{
  return value >= 30;
})
console.log(result); // [30, 40, 50]


==================
17. JavaScript this
==================
. In JavaScript, 'this', is the Object.
. If we use 'this' under any object then, 'this' denote the parent Object.
. under any event, 'this' refers to the element.
. If we use 'this' under a functon, 
    without strict mode then 'this' denote the Global Window Object
    with strict mode, this under a function returns Undefined.

--------------
I. Under an Object: 'this' denote the parent Object.
--------------
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury',
designation: 'Web Designer',
summery: function(){
  console.log('My name is' + ' ' + this.firstName + ' ' + this.lastName); 
  },
workSummery: function(){
  this.summery();
  console.log('I am a' + ' ' + this.designation);
  }
};
console.log(me.workSummery());


--------------
II. Arrow Function make 'this' eassy
--------------
const me = {
firstName:   'Santanu',
lastName:    'Chowdhury',
designation: ['HTML','CSS','JS'],
office:function(){
   this.designation.forEach((value, key)=>{
     console.log(`${this.firstName} loves ${value}`)
   })
  },
};
console.log(me.office());

//output:
Santanu loves HTML
Santanu loves CSS
Santanu loves JS


==================
18. JavaScript Class
==================
Concept of Class:
--------------
> In programming, everything is an entity/object.
  Each entity/object belongs to a specific 'Class'.

> For example, letâ€™s say we have three entities: Laptop, Mobile, and Tablet.
  These three entities represent different classes.

> Every entity/object, like Laptop, Mobile, and Tablet,
  has different properties and methods, which are defined in their specific class.

> Now, if I have two laptops, Dell and Lenovo,
  both of these objects belong to the 'Laptop' class.

> Similarly, if I have two mobile phones, Samsung and Mi,
  these objects belong to the 'Mobile' class.

> In short, Laptop, Mobile, and Tablet are classes, and:
   . Dell and Lenovo belong to the 'Laptop' class.
   . Samsung and Mi belong to the 'Mobile' class.

> Before defining a class for any object, think about its properties (attributes) 
  and methods (behaviors or functions).
--------------

. Vanila JavaScript is not Object-oriented programming (OOP) language, so 
  Vanila JavaScript don't have Class concept.
. ECMAScript 2015, introduct Class to introduct OOP.
. Syntax:
  class ClassName {
    constructor() {
         // Initialize properties
     }
     methodName() {
        // Define methods
    }
  }

. class is the buleprint for each object.
-------
Example:1
-------
class Car {
  constructor(name, year) {
     this.name = name;  
     this.year = year;
  }
  intro(status='Good'){
    console.log(`${this.name} is bought in the year ${this.year} with ${status} condition.`)
  }
}

const car1 = new Car("TATA", 2023);
const car2 = new Car("Audi", 2022);

console.log(car1.name);
console.log(car2.name);

car1.intro('Best');
car2.intro('well');

==================
19. JavaScript JSON
==================
. JSON stands for JavaScript Object Notation
. Using JSON we can get data and display on our web page.
. JSON is language independent.

. JSON string:
  let x = '{"name":"John", "age":30, "car":null}'

. JSON strings into JavaScript objects:
  JSON.parse(x)

. object into a JSON string:
  JSON.stringify(x)

* Local storage accept JSON data as a string so we use 
  JSON.stringify() to add local storage.
---------------
Example:
---------------
 <script>
  let x = `{"name": "Santanu", "email": "santanuchowdhury04@gmail.com", "age":30, "car":null}`;
  console.log(x);
  let j = JSON.parse(x);
  console.log(j)
  let s = JSON.stringify(j);
  console.log(s)
</script>



==================
20. setInterval() and setTimeout()
==================

setTimeout(function(){
  console.log('test')
},3000);							

setInterval(()=>{
    console.log('test')
},3000);


==================
21. Synchronous and Asynchronous JavaScript:
    1. Callbacks
    2. Promises
    3. Async/Await
==================
. JavaScript is single-threaded, meaning it can only do one task at a time, 
  but it has asynchronous capabilities to handle multiple tasks efficiently.
  
------------
I. Synchronous:
------------
. Synchronous code is executed sequentially, meaning one line runs after 
  the previous one has finished.

. If one operation takes time (like a long loop or a network request), 
  the entire script will stop until that task completes.
   
. This behavior is referred to as "blocking".
   
------------
Synchronous code:
------------
console.log("1. Start");
for (let i = 1; i <= 5; i++) {
    console.log(`2. Loop iteration: ${i}`);
}
console.log("3. End");

------------
II. Asynchronous:
------------ 
. JavaScript can also handle asynchronous operations.

. Even though JavaScript is single-threaded and synchronous, asynchronous 
  behavior allows it to perform tasks in the background without blocking 
  the main program.

. There are three common ways to work with asynchronous JavaScript:
  1. Callbacks
  2. Promises
  3. Async/Await
  
------------
1. Callbacks 
------------
. A callback is a function to be executed later.

. Here setTimeout() use as a Callback function.
------------
Code:
------------
console.log("1. Start");

// Let an API call that takes 2 seconds
setTimeout(function() {
    console.log("2. Data fetched from server");
}, 2000);

console.log("3. End");
------------
Note: Callback functions can lead to 'callback hell' if nested deeply, 
      which makes code hard to manage. This led to the adoption of Promises.
------------
2. Promises
------------
. A Promise ensures a result, whether itâ€™s successful (resolve) or an error (reject).
. Promises can be handled using .then() for success and .catch() for errors.
------------
Code
------------
console.log("1. Start");

const fetchData = new Promise((resolve, reject) => {
    // Simulating an API call that takes 2 seconds
    setTimeout(() => {
        resolve("2. Data fetched from server");
    }, 2000);
});

fetchData.then((data) => {
    console.log(data);
}).catch((error) => {
    console.log(error);
});

------------
Note:
Promises used to avoid 'callback hell', but the syntax become complex.

------------
3. Async/Await
------------
. Async/Await syntax is clean and readable way to work with promises.

------------
Async:
------------
. If we Add 'async' befor a function it becomes an asynchronous function 
  and returns a promise.
  
. since it returns a promise, can be handled using .then() for success 
  and .catch() for errors.

------------
basic structure using async
------------
async function exampleFunction() {
    return "Hello, World!";
}
exampleFunction().then((result) => {
    console.log(result); // Outputs: Hello, World!
});

------------
Await:
------------
. The await keyword is used inside an async function

. 'await' is used to wait for a promise to get resolve or reject. 

. When we use 'await' JavaScript pauses the execution of async function
  code until the promise settles.

------------
code:
------------
 async function getData(){
  const response = await fetch("https://dummyjson.com/users");
  const data = await response.json(); 
  return data;
}
getData().then(res=>{
  console.log(res);
  res.users.map(x=>{
  console.log(x.id);
  })
})
------------
Explain:
. fetch() is an asynchronous operation and returns a promise.

. The await keyword pauses the execution of the getData() function 
  until the fetch() promise resolves.

. ** Both fetch() and .json() are asynchronous and return promises.

. Since fetch() returns a promise, we may handel it using .then() and .catch() methods

------------
Example:
*Here we do not wrap with getData() function.
------------
fetch(`https://dummyjson.com/users`)
.then((res)=> res.json())
.then((data)=> console.log(data))
.catch((error) => console.log(error.message))

------------
Handling Multiple Asynchronous Operations 
(Example: Fetching Data Sequentially):
------------
. Letâ€™s say weâ€™re building a weather application that requires two 
  asynchronous API requests:
   1. First, to get the userâ€™s location.
   2. Second, to fetch the weather based on the location.
  
. These calls should be made one after another because the second call 
  depends on the result of the first.

Example:
------------
async function getWeather() {
    try {
        // Fetch location
        const locationResponse = await fetch("https://api.example.com/location");
        const location = await locationResponse.json();
        console.log("User location:", location);

        // Fetch weather using the location data
        const weatherResponse = await fetch(`https://api.example.com/weather?lat=${location.lat}&lon=${location.lon}`);
        const weather = await weatherResponse.json();
        console.log("Weather Data:", weather);
    } catch (error) {
        console.error("Failed to fetch weather data:", error);
    }
}

getWeather();


==================
22. fetch() API
==================
. The fetch() function use to make HTTP requests. 
. fetch() is asynchronous and return promises.
. Since fetch() returns a promise, we may handel it using .then() and .catch() methods
. fetch() supports various methods like GET, POST, PUT, DELETE, PATCH

----------------
Basic Syntax:
----------------
fetch(url, options)
  .then((res) => res.json())  
  .then((data) => console.log(data)) 
  .catch(error => console.log(error.message))
  
----------------
1. GET Request
----------------
A GET request is used to get data from a server.
This is the default request

----------------

fetch(`https://dummyjson.com/users`)
.then(res=> res.json())
.then(data=> console.log(data))
.catch(error => console.log(error.message))

----------------
2. POST Request
----------------
A POST request is used to send data to a server.

----------------
fetch(`https://dummyjson.com/users/add`, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
},
body: JSON.stringify({
    firstName: 'Santanu',
    lastName: 'Chowdhury',
    age: 30,
  }),
})
.then(res => res.json())
.then(data => console.log(data))
.catch(error => console.log(error.message));

----------------
3. PUT Request
----------------
PUT use to update data
----------------
fetch('https://dummyjson.com/users/add/209', {
  method: 'PUT',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    firstName: 'Santanu',
    lastName: 'Chowdhury',
    age: 34,
  }),
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

----------------
4. DELETE Request
----------------
fetch('https://dummyjson.com/users/add/209', {
  method: 'DELETE',
})
  .then(response => response.json())
  .then(data => console.log('Deleted:', data))
  .catch(error => console.error('Error:', error));

----------------
5. PATCH Request
----------------
A PATCH request is same as PUT, but we do not want to send
entire object, just send changabel fields

----------------
fetch('https://dummyjson.com/users/add/209', {
  method: 'PATCH',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    age: 32,
  }),
})
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));


==================
23. Axios API
==================
. Axios is use for HTTP requests, similar to fetch()
. Axios automatically converts response data to JSON where
  fetch() requires .json() manually.
. Axios has better compatibility with older browsers (like IE11).

-------------
Install:
-------------
> npm i axios

-------------
Add in Project:
-------------
> import axios from 'axios';

-------------
Basic Code Structure
-------------
 async function getData(){
   const response = await axios.get('https://dummyjson.com/posts');
   return response;
};
getData().then((response)=>{
   console.log(response.data.posts);
   response.data.posts.map((index, key)=>{
     console.log(index.id);
   })
});

-------------
Explain:
. axios.get() Also an asynchronous operation and returns a promise and
  we may handel it using .then() OR .catch() methods
-------------
Example:
-------------
function getData(){
axios.get('https://dummyjson.com/posts')
   .then(res => console.log(res.data.posts))
   .catch((error) => {console.log(error.message)})  
};
getData();


==================
24. DOM
==================

. DOM stands for Document Object Model.
. DOM treats the web page as a tree structure, 
  where each element is a node (such as <div>, <p>, <h1>, <button> etc.).
. Using the DOM, JavaScript can access, change, add, or delete HTML elements.
. The DOM acts as an interface or connector between HTML and JavaScript.

--------------
i. List of DOM methods:
--------------  
document.getElementById(id)	
document.getElementsByClassName(name)
document.getElementsByTagName(name)
document.querySelector('.class | #id | elementName')
document.querySelectorAll('.class | #id | elementName') 

# document.getElementsByClassName():
  . It returns an HTMLCollection, which is Live array-like element (but not true array).

# document.getElementsByTagName() => This method returns an HTMLCollection Object

# document.querySelectorAll()     => This method returns an NodeList object.

Note: 
Loop:

*** We can access everyone's 'Value' using for...of Loop

------------
Examples:
------------ 
document.getElementsByClassName()
Note:Select All matched class
------------ 
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const className = document.getElementsByClassName("example");
for(let x of className){
    console.log(x);
    x.style.backgroundColor='red';
}
</script>

------------
document.querySelector()
Note:Select first matched element
------------
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const firstNode = document.querySelector(".example");
firstNode.style.backgroundColor = "red";
</script>

------------
document.querySelectorAll()
Note: Select all matched class OR element
------------
<h2 class="example">A heading</h2>
<p class="example">A paragraph.</p> 
<script>
const nodeList = document.querySelectorAll(".example");
console.log(nodeList);
console.log(nodeList[0])
for(let x of nodeList){
    console.log(x);
    x.style.backgroundColor='red';
}
</script>
------------
document.getElementsByTagName()
Note: Select all matched Element
------------
<h2 class="example">A heading</h2>
<h2 class="example">A paragraph.</h2> 
<script>
const htmlCollection = document.getElementsByTagName("h2");
console.log(htmlCollection);
console.log(htmlCollection[0])
for(let x of htmlCollection){
    console.log(x);
    x.style.backgroundColor='red';
}
</script> 
------------
------------
ii. List of DOM Properties: using those we can change html code
------------
i.   HTML content using      .innerHTML
ii.  HTML css using          .style
iii. HTML attribute using    .src 
iv.  HTML form attribut      .type
v.   HTML form input	     .value
vi.  HTML page URL	     .URL

--------------
Example 1
--------------   
<p>Text</p>
<script>
let p = document.querySelector('p');
p.style.color="#f00";
p.style.fontSize="30px";
</script>

--------------
Example 2
Select multiple elements with same class
-------------- 
<div class="list">
1 
</div>
<div class="list">
2 
</div>
<div class="list">
3
</div>
<div id="demo"></div>
<script>
let list = document.getElementsByClassName('list');
let add = '';
for(let x of list){
    add += x.innerHTML;
}
document.getElementById('demo').innerHTML = add;
</script>

------------
iii. Other DOM Methods
------------
For Creation & Insertion:
------------
document.createElement(tagName)			//Creates a new element
document.createTextNode(text)			//Creates a text node
parent.appendChild(node)			//Adds a node as the last child
parent.insertBefore(newNode, referenceNode)	//Inserts before a specific node

------------
For Modification
------------
element.classList.add(class)			//Adds a class
element.classList.remove(class)			//Removes a class
element.classList.toggle(class)			//Toggles a class on/off
element.classList.contains(class)		//Checks if class exists

element.setAttribute(Attrubute name, value)	//Sets an attribute
element.getAttribute(Attrubute name)		//Gets an attribute
element.removeAttribute(Attrubute name)		//Removes an attribute

e.target.parentElement.remove();

---------
I. Example: Creating new HTML element using Node
---------
<div id="div1">
</div>
<script>
  let addPara = document.createElement('p');
  let addText = document.createTextNode('Hello World');
      addPara.appendChild(addText);
  let parent = document.getElementById('div1');
      parent.appendChild(addPara);
</script>

------------
II Example. Creating new HTML element anywere - insertBefore()
---------
<div id="div1">
  <p id="p1">This is a paragraph.</p>
  <p id="p2">This is another paragraph.</p>
  <p id="p3">This is another paragraph.</p>
</div>
<script>
  let addPara = document.createElement('p');
  let addText = document.createTextNode('Hello World');
      addPara.appendChild(addText);
  let parent = document.getElementById('div1');
  let p2 = document.getElementById('p2');
      parent.insertBefore(addPara, p2);
</script>


------------
III Example: classList.add, classList.toggle
---------
<div id="box">a</div>
<script>
  const box = document.getElementById('box');
  box.classList.add('highlight');
  box.classList.toggle('active');
  console.log(box.classList.contains('active')); // true
</script>

------------
IV Example: setAttribute, getAttribute
---------
<img id="logo" />
<script>
const img = document.getElementById('logo');
img.setAttribute('src', 'logo.png');  // adding src attribute in img tag
console.log(img.getAttribute('src')); // get value of src attribute
</script>


==================
25. JavaScript Events
==================
Common HTML events:
  onclick
  onchange
  onmouseover
  onmouseout
  onkeydown
  onload
  > addEventListener
  DOMContentLoaded

---------
Example 1:
---------
<button onclick="notice()">Alert</button>
<script>
function notice(){
  alert('Hello World');
}
</script>

--------------
Example 2:
--------------   
<input type="text" id="demo" name="number" placeholder="Type Number" />
<input type="submit" onclick="myFunction()">
<div id="result"></div>
<script>
 function myFunction(){
    let x = document.getElementById('demo').value;
    x = x.toUpperCase();
    document.getElementById('result').innerHTML = x;
 }
</script>  

---------
Example 3:
---------
<h1 onclick="this.style.color='red'">Hello World!</h1>
<h1 onclick="this.innerHTML='I love JavaScript'">Hello World!</h1>

---------
** Example 4:
---------
<button onclick="update(this)">Click</button>
<button onclick="update(this)">Click</button>
<script>
function update(e){
    e.innerHTML = "Thanks";
}
</script>

---------
** Example 5:
---------
<button onclick="update(event)">Click</button>
<button onclick="update(event)">Click</button>
<script>
function update(e){
    e.target.innerHTML = "Thanks";
}
</script>

---------
Example 6:
---------
<Button id="buy1">Buy Now</Button>
<Button id="buy2">Buy Now</Button>
<script>
let buy1 = document.querySelector('#buy1');
buy1.onclick = function(){
buy1.innerHTML = 'Thank You';
window.open("https://www.w3schools.com", '_blank');
}

let buy2 = document.querySelector('#buy2');
buy2.onclick = function(){
buy2.innerHTML = 'Thank You';
window.open("http://www.google.com", '_blank');
}
</script>

---------
> addEventListener
---------
. Here we don't need to add JS code under inline HTML.
. syntax:
  element.addEventListener('event', function, useCapture);
. *** 'event' => 'click' in place of 'onclick'

---------
Example: 1
---------
<button id="button">Click</button>
<script>
  let button = document.getElementById('button');
  button.addEventListener('click', function(){
    console.log('Hello World!');
  });
</script>

---------
Example: 2
DOMContentLoaded event fires when the HTML document has been loaded completely
---------
document.addEventListener("DOMContentLoaded", (event) => {
  console.log("DOM fully loaded and parsed");
});

---------
Example: 3
select multiple element with class and add event
---------
<div class="list">
1 
</div>
<div class="list">
2 
</div>
<div class="list">
3
</div>
<script>
let lists = document.getElementsByClassName('list');
for(list of lists){
  list.addEventListener('click', function(e){
    e.target.style.color="#f00";
    console.log(e.target);
  })
}
</script>

---------
** Example: 4
Add class on click.
---------
<div class="card">card 1</div>
<div class="card">card 2</div>
<div class="card">card 3</div>
<div class="card">card 4</div>
<div class="card">card 5</div>
<script>
document.addEventListener("DOMContentLoaded", function () {
  let cards = document.querySelectorAll(".card");
  for (let card of cards) {
    card.addEventListener("click", function () {
       for (let card of cards) {
         card.classList.remove("active");
       }
       this.classList.add("active");
    });
  }
});    
</script>

NOTE:
1. Our features will be activate after DOM load
2. use `this.classList.add()` in place of `e.target.ClassList.add()` 
   to add .active class correctly with out facing Unexpected behavior!

----------
* Bubbling(Default) and Capturing:
----------
. In bubbling the inner most element's event is handled first and then the outer. 
  Example:	
  the <p> element's click event is handled first, then the <div> element's click event.

. In capturing the outer most element's event is handled first and then the inner.
  Example:
  the <div> element's click event will be handled first, then the <p> element's click event.
  
  example:
  button.addEventListener('click', function(){
  }, true);


==================
26. JavaScript Errors
==================
   syntax:
   try {
    //test code
   }
   catch(err) {
     console.log(err.message); // ERROR MESSAGE
   }


==================
27. Web API
==================
i.   Fetch API
     Axios API
ii.  worker API
iii. Forms API
iv.  Web History API
v.   Storage API

--------------
i.   Fetch API
------------
> Using ASYNC
------------
<button onclick="getData()">Get Data</button>
<div id="demo"></div>
<script>
  const x = document.getElementById('demo');
  async function getData(){
      const response = await fetch("https://dummyjson.com/users");
      const data = await response.text(); 
      console.log(data);
      x.innerText= data; 
  }
</script>

---------
Example:
---------
<script>
 async function getData(){
  const response = await fetch("https://dummyjson.com/users");
  const data = await response.json(); 
  return data;
}
getData().then(res=>{
  console.log(res);
  res.users.map(x=>{
  console.log(x.id);
  })
})
</script>

---------
Example:
fetch with try{} catch(error){}
---------
  async function getData(){
    let url = `https://dummyjson.com/users`;
    try{
      const res = await fetch(url);
      // if (!res.ok) {
      //   throw new Error(`HTTP error! status: ${res.status}`);
      // }
      const data = await res.json();
      return data;
    }
    catch(error){
      console.error(error.message)
    }
  }
  getData().then((data)=>{
    console.log(data);
  })


-------------
ii.  worker API
-------------
> The Web Workers API is asynchronous.
> It runs in a separate thread, so the main thread can continue executing without waiting for the worker to finish.
> This helps offload heavy tasks from the main thread, ensuring that the UI remains responsive.
-------------
STEPs:
-------------
ii. worker API
-------------
> define Web Worker using 
  new Worker("js/worker.js")

> On 'worker.js' when task done, send data using
  postMessage()
  
> when message received, 'onmessage' event handler triggered .	
 
> This event handler updates the data.

-------------
Example:
-------------
<button onclick="alert('Hellow')">Alert</button>
<p id="demo"></p>
<script>
let w = new Worker("js/worker.js");
w.onmessage  = function(event){
  document.getElementById('demo').innerHTML = event.data;
}
</script>

-------------
js/worker.js
-------------
let i = 0;
while (i<1000000000){
    i++;
}
postMessage(i);

---------
iii. Forms API
---------
checkValidity() 
validationMessage

---------
iv.  Web History API
---------
back() 
forward()
---------
v.   Storage API
---------
localStorage.setItem(data, "John Doe");
sessionStorage.setItem(data, "John Doe");

Example:
--------------
localStorage
--------------
<input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData(value1.value, value2.value, value3.value, );
    }
   function saveData(v1, v2, v3){
     localStorage.setItem('setv1', v1);
     localStorage.setItem('setv2', v2);
     localStorage.setItem('setv3', v3);
   }
   function showData(){
    value1.value = localStorage.getItem('setv1');
    value2.value = localStorage.getItem('setv2');
    value3.value = localStorage.getItem('setv3');
   }
  showData();
  </script>

--------------
localStorage with JSON
--------------
  <input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <button onclick="deleteStorage()">Delete Local Storage</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData({'v1':value1.value, 'v2':value2.value, 'v3':value3.value});
    }
   function saveData(data){
     localStorage.setItem('inputData', JSON.stringify(data));
   }
   function showData(){
     let storeData = localStorage.getItem('inputData');
     let data = JSON.parse(storeData);
     value1.value = data.v1;
     value2.value = data.v2;
     value3.value = data.v3;
   }
  showData();
  function deleteStorage(){
    localStorage.removeItem('inputData');
  }
  </script>
  
--------------
Delete localStorage
-------------- 
  <input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu2" placeholder="Add Location">
  <br>
  <input type="text" id="js-valu3" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <button onclick="deleteLocalStorage()">Delete Local Storage</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   let value2 = document.getElementById('js-valu2');
   let value3 = document.getElementById('js-valu3');
   function weatherCheck(){
      saveData(value1.value, value2.value, value3.value, );
    }
   function saveData(v1, v2, v3){
     localStorage.setItem('setv1', v1);
     localStorage.setItem('setv2', v2);
     localStorage.setItem('setv3', v3);
   }
   function showData(){
    value1.value = localStorage.getItem('setv1');
    value2.value = localStorage.getItem('setv2');
    value3.value = localStorage.getItem('setv3');
   }
  showData();

  function deleteLocalStorage(){
    localStorage.removeItem('setv1');
    localStorage.removeItem('setv2');
    localStorage.removeItem('setv3');
    value1.value="";
    value2.value="";
    value3.value="";
  }
  </script>

--------------
sessionStorage
--------------
<input type="text" id="js-valu1" placeholder="Add Location">
  <br>
  <button onclick="weatherCheck()">Button</button>
  <script>
   let value1 = document.getElementById('js-valu1');
   function weatherCheck(){
      saveData(value1.value);
    }
   function saveData(v1){
     sessionStorage.setItem('setv1', v1);
   }
   function showData(){
    value1.value = sessionStorage.getItem('setv1');
   }
  showData();
  </script>



==================
28. JavaScript Conversion
==================
Strings to Numbers
--------------
i.   Number("3.5")

ii.  Unary + Operator 
     let x = +"5";
     console.log(typeof x);
     
--------------     
Numbers to Strings
--------------
i.  String(100)

--------------
Decimal to Binary
--------------
let x = (50).toString(2);
    console.log(x);

--------------
Binary to Decimal
*Note:add '0b' before binary number.
--------------
let y = (0b110010).toString(10);
    console.log(y);


==================
29. JavaScript Sets
==================
. Set is a collection of unique values.

. example:
  const x = new Set(["a","b","c"]);
  
. Sets are Objects
  const x = new Set(["a","b","c"]);
  console.log(typeof x);		 //object
  console.log(x instanceof Set);         //true
  

==================
30. JavaScript Maps
==================
. A Map holds pairs of key and value where the keys can be any datatype.

. Example:
  const fruits = new Map([
    ["apples", 500],
    ["bananas", 300],
    ["oranges", 200]
  ]);

. Map are Objects
  console.log(typeof fruits);
  console.log(fruits instanceof Map);



==================
31. Summery
==================
1. difference between HTMLCollection and NodeList?
   HTMLCollection is live:
   Updates automatically when the DOM changes.

   NodeList is usually static:
   It does not update when the DOM changes.

2. Function Arguments:
Using Funcion Arguments we can access function parameter within the Function.

3. Anonymous Function:
Function without a name called anonymous function.

4.Regular Expressions:
To Search text and replace text we use Regular Expessions.

5. Unary + Operator 

5. Object Accessors
. Getters and setters are the Accessors on JavaScript Object.
. Using Getters and setters we get **Computed Properties**.
. for better data quality we use get and set

6.Object Constructors
Using a function when we create an Object is called Object Constructor.

7. Object Prototypes	

8 call()
. call is Object method. 

9. apply()

10. Closures:
Using Closures we can call a child function from outside the self-invoking Nested Parent function.
  
11. Event Bubbling(Default) or Event Capturing.

==================
32. FAQ
==================
How to remove duplicates from an array?
In JavaScript all functions are Method?
Find the largest value from an Array?
--------------
How to remove duplicates from an array?

const x = ['HTML','CSS','JavaScript', 'HTML', 'Bootstrap']  
console.log(new Set([...x]));
//output: ['HTML', 'CSS', 'JavaScript', 'Bootstrap']

--------------
In JavaScript all functions are Method?
--------------
A function belong to any object called Method. 
since a simple function also belog to the Window Object, 
then the simple function also a Method.
So, Yes all function in JavaScript are Methods.

function myFunction() {
  console.log('This is Function Declarations')
}
myFunction();
window.myFunction();

--------------
Find the largest value from an Array?
--------------
console.log(Math.max.apply(null,[1,2,3]));


--------------
Click Count
--------------
<button id="add" onclick="add()">Click Count 0 </button>
<script>
let x = document.getElementById('add');
let c = 0;
x.addEventListener('click', function(){
c++;
x.innerHTML = `Click Count ${c}`;
})
</script>

--------------
use of 'name' attribute
--------------
<form>
<input type="text" name="display">
<input type="button" value="1" onclick="display.value += '1'" />
<input type="button" value="2" onclick="display.value += '2'" />
<input type="button" value="+" onclick="display.value += '+'" />
<input type="button" value="-" onclick="display.value += '-'" />
</form>


